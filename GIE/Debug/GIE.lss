
GIE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000009a8  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004dc  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <main>
  64:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPinDirection>:

#ifndef DIO_PROGRAM_C_
#define DIO_PROGRAM_C_

uint8 DIO_setPinDirection(uint8 copy_port, uint8 copy_pin, uint8 copy_direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	8a 83       	std	Y+2, r24	; 0x02
  82:	6b 83       	std	Y+3, r22	; 0x03
  84:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=0;
  86:	19 82       	std	Y+1, r1	; 0x01

 if(copy_pin <= PIN7)
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	08 f0       	brcs	.+2      	; 0x90 <DIO_setPinDirection+0x24>
  8e:	f4 c0       	rjmp	.+488    	; 0x278 <DIO_setPinDirection+0x20c>
 {
	if(copy_direction == OUTPUT)
  90:	8c 81       	ldd	r24, Y+4	; 0x04
  92:	88 23       	and	r24, r24
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_setPinDirection+0x2c>
  96:	72 c0       	rjmp	.+228    	; 0x17c <DIO_setPinDirection+0x110>
	{
		switch(copy_port)
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	38 87       	std	Y+8, r19	; 0x08
  a0:	2f 83       	std	Y+7, r18	; 0x07
  a2:	8f 81       	ldd	r24, Y+7	; 0x07
  a4:	98 85       	ldd	r25, Y+8	; 0x08
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	49 f1       	breq	.+82     	; 0xfe <DIO_setPinDirection+0x92>
  ac:	2f 81       	ldd	r18, Y+7	; 0x07
  ae:	38 85       	ldd	r19, Y+8	; 0x08
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <DIO_setPinDirection+0x54>
  b6:	8f 81       	ldd	r24, Y+7	; 0x07
  b8:	98 85       	ldd	r25, Y+8	; 0x08
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	61 f0       	breq	.+24     	; 0xd6 <DIO_setPinDirection+0x6a>
  be:	5b c0       	rjmp	.+182    	; 0x176 <DIO_setPinDirection+0x10a>
  c0:	2f 81       	ldd	r18, Y+7	; 0x07
  c2:	38 85       	ldd	r19, Y+8	; 0x08
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	71 f1       	breq	.+92     	; 0x126 <DIO_setPinDirection+0xba>
  ca:	8f 81       	ldd	r24, Y+7	; 0x07
  cc:	98 85       	ldd	r25, Y+8	; 0x08
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	e9 f1       	breq	.+122    	; 0x14e <DIO_setPinDirection+0xe2>
  d4:	50 c0       	rjmp	.+160    	; 0x176 <DIO_setPinDirection+0x10a>
    	{
		  case DIO_PORTA: SET_BIT(DDRA,copy_pin); break;
  d6:	aa e3       	ldi	r26, 0x3A	; 58
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ea e3       	ldi	r30, 0x3A	; 58
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	48 2f       	mov	r20, r24
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 2e       	mov	r0, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_setPinDirection+0x88>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_setPinDirection+0x84>
  f8:	84 2b       	or	r24, r20
  fa:	8c 93       	st	X, r24
  fc:	bf c0       	rjmp	.+382    	; 0x27c <DIO_setPinDirection+0x210>
		  case DIO_PORTB: SET_BIT(DDRB,copy_pin); break;
  fe:	a7 e3       	ldi	r26, 0x37	; 55
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e7 e3       	ldi	r30, 0x37	; 55
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_setPinDirection+0xb0>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_setPinDirection+0xac>
 120:	84 2b       	or	r24, r20
 122:	8c 93       	st	X, r24
 124:	ab c0       	rjmp	.+342    	; 0x27c <DIO_setPinDirection+0x210>
		  case DIO_PORTC: SET_BIT(DDRC,copy_pin); break;
 126:	a4 e3       	ldi	r26, 0x34	; 52
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e4 e3       	ldi	r30, 0x34	; 52
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	48 2f       	mov	r20, r24
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	28 2f       	mov	r18, r24
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_setPinDirection+0xd8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_setPinDirection+0xd4>
 148:	84 2b       	or	r24, r20
 14a:	8c 93       	st	X, r24
 14c:	97 c0       	rjmp	.+302    	; 0x27c <DIO_setPinDirection+0x210>
		  case DIO_PORTD: SET_BIT(DDRD,copy_pin); break;
 14e:	a1 e3       	ldi	r26, 0x31	; 49
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e1 e3       	ldi	r30, 0x31	; 49
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	48 2f       	mov	r20, r24
 15a:	8b 81       	ldd	r24, Y+3	; 0x03
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_setPinDirection+0x100>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_setPinDirection+0xfc>
 170:	84 2b       	or	r24, r20
 172:	8c 93       	st	X, r24
 174:	83 c0       	rjmp	.+262    	; 0x27c <DIO_setPinDirection+0x210>
		  default:local_errorStatus=1; break;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	89 83       	std	Y+1, r24	; 0x01
 17a:	80 c0       	rjmp	.+256    	; 0x27c <DIO_setPinDirection+0x210>
	    }
	}
	else if(copy_direction == INPUT)
 17c:	8c 81       	ldd	r24, Y+4	; 0x04
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	09 f0       	breq	.+2      	; 0x184 <DIO_setPinDirection+0x118>
 182:	77 c0       	rjmp	.+238    	; 0x272 <DIO_setPinDirection+0x206>
	{
		switch(copy_port)
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	3e 83       	std	Y+6, r19	; 0x06
 18c:	2d 83       	std	Y+5, r18	; 0x05
 18e:	8d 81       	ldd	r24, Y+5	; 0x05
 190:	9e 81       	ldd	r25, Y+6	; 0x06
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	59 f1       	breq	.+86     	; 0x1ee <DIO_setPinDirection+0x182>
 198:	2d 81       	ldd	r18, Y+5	; 0x05
 19a:	3e 81       	ldd	r19, Y+6	; 0x06
 19c:	22 30       	cpi	r18, 0x02	; 2
 19e:	31 05       	cpc	r19, r1
 1a0:	2c f4       	brge	.+10     	; 0x1ac <DIO_setPinDirection+0x140>
 1a2:	8d 81       	ldd	r24, Y+5	; 0x05
 1a4:	9e 81       	ldd	r25, Y+6	; 0x06
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	69 f0       	breq	.+26     	; 0x1c4 <DIO_setPinDirection+0x158>
 1aa:	60 c0       	rjmp	.+192    	; 0x26c <DIO_setPinDirection+0x200>
 1ac:	2d 81       	ldd	r18, Y+5	; 0x05
 1ae:	3e 81       	ldd	r19, Y+6	; 0x06
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	31 05       	cpc	r19, r1
 1b4:	89 f1       	breq	.+98     	; 0x218 <DIO_setPinDirection+0x1ac>
 1b6:	8d 81       	ldd	r24, Y+5	; 0x05
 1b8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	91 05       	cpc	r25, r1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_setPinDirection+0x156>
 1c0:	40 c0       	rjmp	.+128    	; 0x242 <DIO_setPinDirection+0x1d6>
 1c2:	54 c0       	rjmp	.+168    	; 0x26c <DIO_setPinDirection+0x200>
		{
           case DIO_PORTA: CLEAR_BIT(DDRA, copy_pin); break;
 1c4:	aa e3       	ldi	r26, 0x3A	; 58
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	ea e3       	ldi	r30, 0x3A	; 58
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	48 2f       	mov	r20, r24
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_setPinDirection+0x176>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_setPinDirection+0x172>
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	47 c0       	rjmp	.+142    	; 0x27c <DIO_setPinDirection+0x210>
           case DIO_PORTB: CLEAR_BIT(DDRB, copy_pin); break;
 1ee:	a7 e3       	ldi	r26, 0x37	; 55
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	e7 e3       	ldi	r30, 0x37	; 55
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_setPinDirection+0x1a0>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_setPinDirection+0x19c>
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	8c 93       	st	X, r24
 216:	32 c0       	rjmp	.+100    	; 0x27c <DIO_setPinDirection+0x210>
           case DIO_PORTC: CLEAR_BIT(DDRC, copy_pin); break;
 218:	a4 e3       	ldi	r26, 0x34	; 52
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e4 e3       	ldi	r30, 0x34	; 52
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_setPinDirection+0x1ca>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_setPinDirection+0x1c6>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	1d c0       	rjmp	.+58     	; 0x27c <DIO_setPinDirection+0x210>
           case DIO_PORTD: CLEAR_BIT(DDRD, copy_pin); break;
 242:	a1 e3       	ldi	r26, 0x31	; 49
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e1 e3       	ldi	r30, 0x31	; 49
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_setPinDirection+0x1f4>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_setPinDirection+0x1f0>
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8c 93       	st	X, r24
 26a:	08 c0       	rjmp	.+16     	; 0x27c <DIO_setPinDirection+0x210>
           default:local_errorStatus=1; break;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	05 c0       	rjmp	.+10     	; 0x27c <DIO_setPinDirection+0x210>
		}

	}
	else
	{
		local_errorStatus=1;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_setPinDirection+0x210>


 }
 else
 {
	 local_errorStatus=1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 83       	std	Y+1, r24	; 0x01

 }
 return local_errorStatus;
 27c:	89 81       	ldd	r24, Y+1	; 0x01

}
 27e:	28 96       	adiw	r28, 0x08	; 8
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	cf 91       	pop	r28
 28c:	df 91       	pop	r29
 28e:	08 95       	ret

00000290 <DIO_setPinValue>:


uint8 DIO_setPinValue(uint8 copy_port,uint8 copy_pin,uint8 copy_value)
{
 290:	df 93       	push	r29
 292:	cf 93       	push	r28
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	28 97       	sbiw	r28, 0x08	; 8
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	8a 83       	std	Y+2, r24	; 0x02
 2a6:	6b 83       	std	Y+3, r22	; 0x03
 2a8:	4c 83       	std	Y+4, r20	; 0x04

	uint8 local_errorStatus=0;
 2aa:	19 82       	std	Y+1, r1	; 0x01

	 if(copy_pin <= PIN7)
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	08 f0       	brcs	.+2      	; 0x2b4 <DIO_setPinValue+0x24>
 2b2:	f4 c0       	rjmp	.+488    	; 0x49c <DIO_setPinValue+0x20c>
	 {
		if(copy_value == OUTPUT_HIGH)
 2b4:	8c 81       	ldd	r24, Y+4	; 0x04
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	09 f0       	breq	.+2      	; 0x2bc <DIO_setPinValue+0x2c>
 2ba:	72 c0       	rjmp	.+228    	; 0x3a0 <DIO_setPinValue+0x110>
		{
			switch(copy_port)
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	28 2f       	mov	r18, r24
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	38 87       	std	Y+8, r19	; 0x08
 2c4:	2f 83       	std	Y+7, r18	; 0x07
 2c6:	8f 81       	ldd	r24, Y+7	; 0x07
 2c8:	98 85       	ldd	r25, Y+8	; 0x08
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	91 05       	cpc	r25, r1
 2ce:	49 f1       	breq	.+82     	; 0x322 <DIO_setPinValue+0x92>
 2d0:	2f 81       	ldd	r18, Y+7	; 0x07
 2d2:	38 85       	ldd	r19, Y+8	; 0x08
 2d4:	22 30       	cpi	r18, 0x02	; 2
 2d6:	31 05       	cpc	r19, r1
 2d8:	2c f4       	brge	.+10     	; 0x2e4 <DIO_setPinValue+0x54>
 2da:	8f 81       	ldd	r24, Y+7	; 0x07
 2dc:	98 85       	ldd	r25, Y+8	; 0x08
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	61 f0       	breq	.+24     	; 0x2fa <DIO_setPinValue+0x6a>
 2e2:	5b c0       	rjmp	.+182    	; 0x39a <DIO_setPinValue+0x10a>
 2e4:	2f 81       	ldd	r18, Y+7	; 0x07
 2e6:	38 85       	ldd	r19, Y+8	; 0x08
 2e8:	22 30       	cpi	r18, 0x02	; 2
 2ea:	31 05       	cpc	r19, r1
 2ec:	71 f1       	breq	.+92     	; 0x34a <DIO_setPinValue+0xba>
 2ee:	8f 81       	ldd	r24, Y+7	; 0x07
 2f0:	98 85       	ldd	r25, Y+8	; 0x08
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	91 05       	cpc	r25, r1
 2f6:	e9 f1       	breq	.+122    	; 0x372 <DIO_setPinValue+0xe2>
 2f8:	50 c0       	rjmp	.+160    	; 0x39a <DIO_setPinValue+0x10a>
	    	{
			  case DIO_PORTA: SET_BIT(PORTA, copy_pin); break;
 2fa:	ab e3       	ldi	r26, 0x3B	; 59
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	eb e3       	ldi	r30, 0x3B	; 59
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	48 2f       	mov	r20, r24
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	28 2f       	mov	r18, r24
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 2e       	mov	r0, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_setPinValue+0x88>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_setPinValue+0x84>
 31c:	84 2b       	or	r24, r20
 31e:	8c 93       	st	X, r24
 320:	bf c0       	rjmp	.+382    	; 0x4a0 <DIO_setPinValue+0x210>
			  case DIO_PORTB: SET_BIT(PORTB, copy_pin); break;
 322:	a8 e3       	ldi	r26, 0x38	; 56
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e8 e3       	ldi	r30, 0x38	; 56
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 2e       	mov	r0, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_setPinValue+0xb0>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_setPinValue+0xac>
 344:	84 2b       	or	r24, r20
 346:	8c 93       	st	X, r24
 348:	ab c0       	rjmp	.+342    	; 0x4a0 <DIO_setPinValue+0x210>
			  case DIO_PORTC: SET_BIT(PORTC, copy_pin); break;
 34a:	a5 e3       	ldi	r26, 0x35	; 53
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	e5 e3       	ldi	r30, 0x35	; 53
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	48 2f       	mov	r20, r24
 356:	8b 81       	ldd	r24, Y+3	; 0x03
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 2e       	mov	r0, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_setPinValue+0xd8>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_setPinValue+0xd4>
 36c:	84 2b       	or	r24, r20
 36e:	8c 93       	st	X, r24
 370:	97 c0       	rjmp	.+302    	; 0x4a0 <DIO_setPinValue+0x210>
			  case DIO_PORTD: SET_BIT(PORTD, copy_pin); break;
 372:	a2 e3       	ldi	r26, 0x32	; 50
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	e2 e3       	ldi	r30, 0x32	; 50
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	48 2f       	mov	r20, r24
 37e:	8b 81       	ldd	r24, Y+3	; 0x03
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_setPinValue+0x100>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_setPinValue+0xfc>
 394:	84 2b       	or	r24, r20
 396:	8c 93       	st	X, r24
 398:	83 c0       	rjmp	.+262    	; 0x4a0 <DIO_setPinValue+0x210>
			  default:local_errorStatus=1; break;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	80 c0       	rjmp	.+256    	; 0x4a0 <DIO_setPinValue+0x210>
		    }
		}
		else if(copy_value == OUTPUT_LOW)
 3a0:	8c 81       	ldd	r24, Y+4	; 0x04
 3a2:	88 23       	and	r24, r24
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <DIO_setPinValue+0x118>
 3a6:	77 c0       	rjmp	.+238    	; 0x496 <DIO_setPinValue+0x206>
		{
			switch(copy_port)
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	3e 83       	std	Y+6, r19	; 0x06
 3b0:	2d 83       	std	Y+5, r18	; 0x05
 3b2:	8d 81       	ldd	r24, Y+5	; 0x05
 3b4:	9e 81       	ldd	r25, Y+6	; 0x06
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	91 05       	cpc	r25, r1
 3ba:	59 f1       	breq	.+86     	; 0x412 <DIO_setPinValue+0x182>
 3bc:	2d 81       	ldd	r18, Y+5	; 0x05
 3be:	3e 81       	ldd	r19, Y+6	; 0x06
 3c0:	22 30       	cpi	r18, 0x02	; 2
 3c2:	31 05       	cpc	r19, r1
 3c4:	2c f4       	brge	.+10     	; 0x3d0 <DIO_setPinValue+0x140>
 3c6:	8d 81       	ldd	r24, Y+5	; 0x05
 3c8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	69 f0       	breq	.+26     	; 0x3e8 <DIO_setPinValue+0x158>
 3ce:	60 c0       	rjmp	.+192    	; 0x490 <DIO_setPinValue+0x200>
 3d0:	2d 81       	ldd	r18, Y+5	; 0x05
 3d2:	3e 81       	ldd	r19, Y+6	; 0x06
 3d4:	22 30       	cpi	r18, 0x02	; 2
 3d6:	31 05       	cpc	r19, r1
 3d8:	89 f1       	breq	.+98     	; 0x43c <DIO_setPinValue+0x1ac>
 3da:	8d 81       	ldd	r24, Y+5	; 0x05
 3dc:	9e 81       	ldd	r25, Y+6	; 0x06
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	91 05       	cpc	r25, r1
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <DIO_setPinValue+0x156>
 3e4:	40 c0       	rjmp	.+128    	; 0x466 <DIO_setPinValue+0x1d6>
 3e6:	54 c0       	rjmp	.+168    	; 0x490 <DIO_setPinValue+0x200>
			{
	           case DIO_PORTA: CLEAR_BIT(PORTA, copy_pin); break;
 3e8:	ab e3       	ldi	r26, 0x3B	; 59
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	eb e3       	ldi	r30, 0x3B	; 59
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	48 2f       	mov	r20, r24
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 2e       	mov	r0, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_setPinValue+0x176>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <DIO_setPinValue+0x172>
 40a:	80 95       	com	r24
 40c:	84 23       	and	r24, r20
 40e:	8c 93       	st	X, r24
 410:	47 c0       	rjmp	.+142    	; 0x4a0 <DIO_setPinValue+0x210>
	           case DIO_PORTB: CLEAR_BIT(PORTB, copy_pin); break;
 412:	a8 e3       	ldi	r26, 0x38	; 56
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e8 e3       	ldi	r30, 0x38	; 56
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	48 2f       	mov	r20, r24
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 2e       	mov	r0, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_setPinValue+0x1a0>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_setPinValue+0x19c>
 434:	80 95       	com	r24
 436:	84 23       	and	r24, r20
 438:	8c 93       	st	X, r24
 43a:	32 c0       	rjmp	.+100    	; 0x4a0 <DIO_setPinValue+0x210>
	           case DIO_PORTC: CLEAR_BIT(PORTC, copy_pin); break;
 43c:	a5 e3       	ldi	r26, 0x35	; 53
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e5 e3       	ldi	r30, 0x35	; 53
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	48 2f       	mov	r20, r24
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 2e       	mov	r0, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_setPinValue+0x1ca>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_setPinValue+0x1c6>
 45e:	80 95       	com	r24
 460:	84 23       	and	r24, r20
 462:	8c 93       	st	X, r24
 464:	1d c0       	rjmp	.+58     	; 0x4a0 <DIO_setPinValue+0x210>
	           case DIO_PORTD: CLEAR_BIT(PORTD, copy_pin); break;
 466:	a2 e3       	ldi	r26, 0x32	; 50
 468:	b0 e0       	ldi	r27, 0x00	; 0
 46a:	e2 e3       	ldi	r30, 0x32	; 50
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	48 2f       	mov	r20, r24
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	28 2f       	mov	r18, r24
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 2e       	mov	r0, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_setPinValue+0x1f4>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_setPinValue+0x1f0>
 488:	80 95       	com	r24
 48a:	84 23       	and	r24, r20
 48c:	8c 93       	st	X, r24
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <DIO_setPinValue+0x210>
	           default:local_errorStatus=1; break;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	89 83       	std	Y+1, r24	; 0x01
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <DIO_setPinValue+0x210>
			}
		}
		else
		{
			local_errorStatus=1;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	89 83       	std	Y+1, r24	; 0x01
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_setPinValue+0x210>


	 }
	 else
	 {
		 local_errorStatus=1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	89 83       	std	Y+1, r24	; 0x01

	 }
	 return local_errorStatus;
 4a0:	89 81       	ldd	r24, Y+1	; 0x01


}
 4a2:	28 96       	adiw	r28, 0x08	; 8
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	08 95       	ret

000004b4 <DIO_setPortDirection>:

uint8 DIO_setPortDirection(uint8 copy_port,uint8 copy_direction)
{
 4b4:	df 93       	push	r29
 4b6:	cf 93       	push	r28
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <DIO_setPortDirection+0x6>
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <DIO_setPortDirection+0x8>
 4bc:	0f 92       	push	r0
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	8a 83       	std	Y+2, r24	; 0x02
 4c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorStatus=OK;
 4c6:	19 82       	std	Y+1, r1	; 0x01

	if (copy_direction == PORT_OUTPUT || copy_direction == PORT_INPUT )
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	8f 3f       	cpi	r24, 0xFF	; 255
 4cc:	19 f0       	breq	.+6      	; 0x4d4 <DIO_setPortDirection+0x20>
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	88 23       	and	r24, r24
 4d2:	b1 f5       	brne	.+108    	; 0x540 <DIO_setPortDirection+0x8c>
	{

		switch(copy_port)
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	3d 83       	std	Y+5, r19	; 0x05
 4dc:	2c 83       	std	Y+4, r18	; 0x04
 4de:	8c 81       	ldd	r24, Y+4	; 0x04
 4e0:	9d 81       	ldd	r25, Y+5	; 0x05
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	91 05       	cpc	r25, r1
 4e6:	d1 f0       	breq	.+52     	; 0x51c <DIO_setPortDirection+0x68>
 4e8:	2c 81       	ldd	r18, Y+4	; 0x04
 4ea:	3d 81       	ldd	r19, Y+5	; 0x05
 4ec:	22 30       	cpi	r18, 0x02	; 2
 4ee:	31 05       	cpc	r19, r1
 4f0:	2c f4       	brge	.+10     	; 0x4fc <DIO_setPortDirection+0x48>
 4f2:	8c 81       	ldd	r24, Y+4	; 0x04
 4f4:	9d 81       	ldd	r25, Y+5	; 0x05
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	61 f0       	breq	.+24     	; 0x512 <DIO_setPortDirection+0x5e>
 4fa:	1f c0       	rjmp	.+62     	; 0x53a <DIO_setPortDirection+0x86>
 4fc:	2c 81       	ldd	r18, Y+4	; 0x04
 4fe:	3d 81       	ldd	r19, Y+5	; 0x05
 500:	22 30       	cpi	r18, 0x02	; 2
 502:	31 05       	cpc	r19, r1
 504:	81 f0       	breq	.+32     	; 0x526 <DIO_setPortDirection+0x72>
 506:	8c 81       	ldd	r24, Y+4	; 0x04
 508:	9d 81       	ldd	r25, Y+5	; 0x05
 50a:	83 30       	cpi	r24, 0x03	; 3
 50c:	91 05       	cpc	r25, r1
 50e:	81 f0       	breq	.+32     	; 0x530 <DIO_setPortDirection+0x7c>
 510:	14 c0       	rjmp	.+40     	; 0x53a <DIO_setPortDirection+0x86>
					{
			           case DIO_PORTA: DDRA = copy_direction; break;
 512:	ea e3       	ldi	r30, 0x3A	; 58
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	8b 81       	ldd	r24, Y+3	; 0x03
 518:	80 83       	st	Z, r24
 51a:	14 c0       	rjmp	.+40     	; 0x544 <DIO_setPortDirection+0x90>
			           case DIO_PORTB: DDRB = copy_direction; break;
 51c:	e7 e3       	ldi	r30, 0x37	; 55
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	8b 81       	ldd	r24, Y+3	; 0x03
 522:	80 83       	st	Z, r24
 524:	0f c0       	rjmp	.+30     	; 0x544 <DIO_setPortDirection+0x90>
			           case DIO_PORTC: DDRC = copy_direction; break;
 526:	e4 e3       	ldi	r30, 0x34	; 52
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	80 83       	st	Z, r24
 52e:	0a c0       	rjmp	.+20     	; 0x544 <DIO_setPortDirection+0x90>
			           case DIO_PORTD: DDRD = copy_direction; break;
 530:	e1 e3       	ldi	r30, 0x31	; 49
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	80 83       	st	Z, r24
 538:	05 c0       	rjmp	.+10     	; 0x544 <DIO_setPortDirection+0x90>
			           default:local_errorStatus=NOK; break;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_setPortDirection+0x90>
					}
	}
	else
	{
		local_errorStatus=NOK;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	89 83       	std	Y+1, r24	; 0x01
	}


	return local_errorStatus;
 544:	89 81       	ldd	r24, Y+1	; 0x01


}
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	cf 91       	pop	r28
 552:	df 91       	pop	r29
 554:	08 95       	ret

00000556 <DIO_setPortValue>:



uint8 DIO_setPortValue(uint8 copy_port,uint8 copy_value)
{
 556:	df 93       	push	r29
 558:	cf 93       	push	r28
 55a:	00 d0       	rcall	.+0      	; 0x55c <DIO_setPortValue+0x6>
 55c:	00 d0       	rcall	.+0      	; 0x55e <DIO_setPortValue+0x8>
 55e:	0f 92       	push	r0
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
 564:	8a 83       	std	Y+2, r24	; 0x02
 566:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorStatus=OK;
 568:	19 82       	std	Y+1, r1	; 0x01


		switch(copy_port)
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	3d 83       	std	Y+5, r19	; 0x05
 572:	2c 83       	std	Y+4, r18	; 0x04
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	9d 81       	ldd	r25, Y+5	; 0x05
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	91 05       	cpc	r25, r1
 57c:	d1 f0       	breq	.+52     	; 0x5b2 <DIO_setPortValue+0x5c>
 57e:	2c 81       	ldd	r18, Y+4	; 0x04
 580:	3d 81       	ldd	r19, Y+5	; 0x05
 582:	22 30       	cpi	r18, 0x02	; 2
 584:	31 05       	cpc	r19, r1
 586:	2c f4       	brge	.+10     	; 0x592 <DIO_setPortValue+0x3c>
 588:	8c 81       	ldd	r24, Y+4	; 0x04
 58a:	9d 81       	ldd	r25, Y+5	; 0x05
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	61 f0       	breq	.+24     	; 0x5a8 <DIO_setPortValue+0x52>
 590:	1f c0       	rjmp	.+62     	; 0x5d0 <DIO_setPortValue+0x7a>
 592:	2c 81       	ldd	r18, Y+4	; 0x04
 594:	3d 81       	ldd	r19, Y+5	; 0x05
 596:	22 30       	cpi	r18, 0x02	; 2
 598:	31 05       	cpc	r19, r1
 59a:	81 f0       	breq	.+32     	; 0x5bc <DIO_setPortValue+0x66>
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	9d 81       	ldd	r25, Y+5	; 0x05
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	91 05       	cpc	r25, r1
 5a4:	81 f0       	breq	.+32     	; 0x5c6 <DIO_setPortValue+0x70>
 5a6:	14 c0       	rjmp	.+40     	; 0x5d0 <DIO_setPortValue+0x7a>
					{
			           case DIO_PORTA: PORTA = copy_value; break;
 5a8:	eb e3       	ldi	r30, 0x3B	; 59
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	80 83       	st	Z, r24
 5b0:	11 c0       	rjmp	.+34     	; 0x5d4 <DIO_setPortValue+0x7e>
			           case DIO_PORTB: PORTB = copy_value; break;
 5b2:	e8 e3       	ldi	r30, 0x38	; 56
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	80 83       	st	Z, r24
 5ba:	0c c0       	rjmp	.+24     	; 0x5d4 <DIO_setPortValue+0x7e>
			           case DIO_PORTC: PORTC = copy_value; break;
 5bc:	e5 e3       	ldi	r30, 0x35	; 53
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	80 83       	st	Z, r24
 5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <DIO_setPortValue+0x7e>
			           case DIO_PORTD: PORTD = copy_value; break;
 5c6:	e2 e3       	ldi	r30, 0x32	; 50
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	80 83       	st	Z, r24
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_setPortValue+0x7e>
			           default:local_errorStatus=NOK; break;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	89 83       	std	Y+1, r24	; 0x01
					}


	return local_errorStatus;
 5d4:	89 81       	ldd	r24, Y+1	; 0x01


}
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	cf 91       	pop	r28
 5e2:	df 91       	pop	r29
 5e4:	08 95       	ret

000005e6 <DIO_getPinValue>:

uint8 DIO_getPinValue(uint8 copy_port, uint8 copy_pin, uint8* copy_value)
{
 5e6:	df 93       	push	r29
 5e8:	cf 93       	push	r28
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	27 97       	sbiw	r28, 0x07	; 7
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	8a 83       	std	Y+2, r24	; 0x02
 5fc:	6b 83       	std	Y+3, r22	; 0x03
 5fe:	5d 83       	std	Y+5, r21	; 0x05
 600:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=OK;
 602:	19 82       	std	Y+1, r1	; 0x01

	if((copy_pin <= PIN7) && (copy_value != NULL))
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	88 30       	cpi	r24, 0x08	; 8
 608:	08 f0       	brcs	.+2      	; 0x60c <DIO_getPinValue+0x26>
 60a:	79 c0       	rjmp	.+242    	; 0x6fe <DIO_getPinValue+0x118>
 60c:	8c 81       	ldd	r24, Y+4	; 0x04
 60e:	9d 81       	ldd	r25, Y+5	; 0x05
 610:	00 97       	sbiw	r24, 0x00	; 0
 612:	09 f4       	brne	.+2      	; 0x616 <DIO_getPinValue+0x30>
 614:	74 c0       	rjmp	.+232    	; 0x6fe <DIO_getPinValue+0x118>
	{
		switch(copy_port)
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	3f 83       	std	Y+7, r19	; 0x07
 61e:	2e 83       	std	Y+6, r18	; 0x06
 620:	4e 81       	ldd	r20, Y+6	; 0x06
 622:	5f 81       	ldd	r21, Y+7	; 0x07
 624:	41 30       	cpi	r20, 0x01	; 1
 626:	51 05       	cpc	r21, r1
 628:	59 f1       	breq	.+86     	; 0x680 <DIO_getPinValue+0x9a>
 62a:	8e 81       	ldd	r24, Y+6	; 0x06
 62c:	9f 81       	ldd	r25, Y+7	; 0x07
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	91 05       	cpc	r25, r1
 632:	34 f4       	brge	.+12     	; 0x640 <DIO_getPinValue+0x5a>
 634:	2e 81       	ldd	r18, Y+6	; 0x06
 636:	3f 81       	ldd	r19, Y+7	; 0x07
 638:	21 15       	cp	r18, r1
 63a:	31 05       	cpc	r19, r1
 63c:	69 f0       	breq	.+26     	; 0x658 <DIO_getPinValue+0x72>
 63e:	5c c0       	rjmp	.+184    	; 0x6f8 <DIO_getPinValue+0x112>
 640:	4e 81       	ldd	r20, Y+6	; 0x06
 642:	5f 81       	ldd	r21, Y+7	; 0x07
 644:	42 30       	cpi	r20, 0x02	; 2
 646:	51 05       	cpc	r21, r1
 648:	79 f1       	breq	.+94     	; 0x6a8 <DIO_getPinValue+0xc2>
 64a:	8e 81       	ldd	r24, Y+6	; 0x06
 64c:	9f 81       	ldd	r25, Y+7	; 0x07
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	91 05       	cpc	r25, r1
 652:	09 f4       	brne	.+2      	; 0x656 <DIO_getPinValue+0x70>
 654:	3d c0       	rjmp	.+122    	; 0x6d0 <DIO_getPinValue+0xea>
 656:	50 c0       	rjmp	.+160    	; 0x6f8 <DIO_getPinValue+0x112>
					{
			           case DIO_PORTA: * copy_value = GET_BIT(PINA, copy_pin); break;
 658:	e9 e3       	ldi	r30, 0x39	; 57
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	28 2f       	mov	r18, r24
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	88 2f       	mov	r24, r24
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	a9 01       	movw	r20, r18
 66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_getPinValue+0x8a>
 66c:	55 95       	asr	r21
 66e:	47 95       	ror	r20
 670:	8a 95       	dec	r24
 672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_getPinValue+0x86>
 674:	ca 01       	movw	r24, r20
 676:	81 70       	andi	r24, 0x01	; 1
 678:	ec 81       	ldd	r30, Y+4	; 0x04
 67a:	fd 81       	ldd	r31, Y+5	; 0x05
 67c:	80 83       	st	Z, r24
 67e:	41 c0       	rjmp	.+130    	; 0x702 <DIO_getPinValue+0x11c>
			           case DIO_PORTB: * copy_value = GET_BIT(PINB, copy_pin); break;
 680:	e6 e3       	ldi	r30, 0x36	; 54
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	28 2f       	mov	r18, r24
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	8b 81       	ldd	r24, Y+3	; 0x03
 68c:	88 2f       	mov	r24, r24
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	a9 01       	movw	r20, r18
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_getPinValue+0xb2>
 694:	55 95       	asr	r21
 696:	47 95       	ror	r20
 698:	8a 95       	dec	r24
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_getPinValue+0xae>
 69c:	ca 01       	movw	r24, r20
 69e:	81 70       	andi	r24, 0x01	; 1
 6a0:	ec 81       	ldd	r30, Y+4	; 0x04
 6a2:	fd 81       	ldd	r31, Y+5	; 0x05
 6a4:	80 83       	st	Z, r24
 6a6:	2d c0       	rjmp	.+90     	; 0x702 <DIO_getPinValue+0x11c>
			           case DIO_PORTC: * copy_value = GET_BIT(PINC, copy_pin); break;
 6a8:	e3 e3       	ldi	r30, 0x33	; 51
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	28 2f       	mov	r18, r24
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	8b 81       	ldd	r24, Y+3	; 0x03
 6b4:	88 2f       	mov	r24, r24
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	a9 01       	movw	r20, r18
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_getPinValue+0xda>
 6bc:	55 95       	asr	r21
 6be:	47 95       	ror	r20
 6c0:	8a 95       	dec	r24
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_getPinValue+0xd6>
 6c4:	ca 01       	movw	r24, r20
 6c6:	81 70       	andi	r24, 0x01	; 1
 6c8:	ec 81       	ldd	r30, Y+4	; 0x04
 6ca:	fd 81       	ldd	r31, Y+5	; 0x05
 6cc:	80 83       	st	Z, r24
 6ce:	19 c0       	rjmp	.+50     	; 0x702 <DIO_getPinValue+0x11c>
			           case DIO_PORTD: * copy_value = GET_BIT(PIND, copy_pin); break;
 6d0:	e0 e3       	ldi	r30, 0x30	; 48
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	28 2f       	mov	r18, r24
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	88 2f       	mov	r24, r24
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	a9 01       	movw	r20, r18
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_getPinValue+0x102>
 6e4:	55 95       	asr	r21
 6e6:	47 95       	ror	r20
 6e8:	8a 95       	dec	r24
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_getPinValue+0xfe>
 6ec:	ca 01       	movw	r24, r20
 6ee:	81 70       	andi	r24, 0x01	; 1
 6f0:	ec 81       	ldd	r30, Y+4	; 0x04
 6f2:	fd 81       	ldd	r31, Y+5	; 0x05
 6f4:	80 83       	st	Z, r24
 6f6:	05 c0       	rjmp	.+10     	; 0x702 <DIO_getPinValue+0x11c>
			           default:local_errorStatus=NOK; break;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	89 83       	std	Y+1, r24	; 0x01
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_getPinValue+0x11c>
					}

	}
	else
	{
		 local_errorStatus=NOK;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	89 83       	std	Y+1, r24	; 0x01
	}


	return local_errorStatus;
 702:	89 81       	ldd	r24, Y+1	; 0x01

}
 704:	27 96       	adiw	r28, 0x07	; 7
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	cf 91       	pop	r28
 712:	df 91       	pop	r29
 714:	08 95       	ret

00000716 <DIO_setInternalPullup>:

void DIO_setInternalPullup(uint8 copy_port, uint8 copy_pin)
{
 716:	df 93       	push	r29
 718:	cf 93       	push	r28
 71a:	00 d0       	rcall	.+0      	; 0x71c <DIO_setInternalPullup+0x6>
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
 720:	89 83       	std	Y+1, r24	; 0x01
 722:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinDirection(copy_port, copy_pin, INPUT);
 724:	89 81       	ldd	r24, Y+1	; 0x01
 726:	6a 81       	ldd	r22, Y+2	; 0x02
 728:	41 e0       	ldi	r20, 0x01	; 1
 72a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>

	DIO_setPinValue(copy_port,copy_pin,OUTPUT_HIGH);
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	6a 81       	ldd	r22, Y+2	; 0x02
 732:	41 e0       	ldi	r20, 0x01	; 1
 734:	0e 94 48 01 	call	0x290	; 0x290 <DIO_setPinValue>


}
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	cf 91       	pop	r28
 73e:	df 91       	pop	r29
 740:	08 95       	ret

00000742 <GIE_enableGlobalInterrupt>:
#include"GIE_Register.h"
#include "GIE_Interface.h"


void GIE_enableGlobalInterrupt(void)
{
 742:	df 93       	push	r29
 744:	cf 93       	push	r28
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(STATUS_REGISTER,STATUS_REGISTER_I);
 74a:	af e5       	ldi	r26, 0x5F	; 95
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	ef e5       	ldi	r30, 0x5F	; 95
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	80 68       	ori	r24, 0x80	; 128
 756:	8c 93       	st	X, r24
}
 758:	cf 91       	pop	r28
 75a:	df 91       	pop	r29
 75c:	08 95       	ret

0000075e <GIE_disableGlobalInterrupt>:
void GIE_disableGlobalInterrupt(void)
{
 75e:	df 93       	push	r29
 760:	cf 93       	push	r28
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(STATUS_REGISTER,STATUS_REGISTER_I);
 766:	af e5       	ldi	r26, 0x5F	; 95
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	ef e5       	ldi	r30, 0x5F	; 95
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	8f 77       	andi	r24, 0x7F	; 127
 772:	8c 93       	st	X, r24

}
 774:	cf 91       	pop	r28
 776:	df 91       	pop	r29
 778:	08 95       	ret

0000077a <External_interrupt_request>:


void External_interrupt_request(void)
{
 77a:	df 93       	push	r29
 77c:	cf 93       	push	r28
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(GICR,INT0); /*interrupt 0*/
	SET_BIT(GICR,INT1);  /*interrupt 1*/
 782:	ab e5       	ldi	r26, 0x5B	; 91
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	eb e5       	ldi	r30, 0x5B	; 91
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	80 68       	ori	r24, 0x80	; 128
 78e:	8c 93       	st	X, r24
	//SET_BIT(GICR,INT2);  /*interrupt 2*/

}
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <External_interrupt_level>:

void External_interrupt_level(void)
{
 796:	df 93       	push	r29
 798:	cf 93       	push	r28
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,ISC11);
 79e:	a5 e5       	ldi	r26, 0x55	; 85
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	e5 e5       	ldi	r30, 0x55	; 85
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	88 60       	ori	r24, 0x08	; 8
 7aa:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC10);
 7ac:	a5 e5       	ldi	r26, 0x55	; 85
 7ae:	b0 e0       	ldi	r27, 0x00	; 0
 7b0:	e5 e5       	ldi	r30, 0x55	; 85
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	84 60       	ori	r24, 0x04	; 4
 7b8:	8c 93       	st	X, r24



}
 7ba:	cf 91       	pop	r28
 7bc:	df 91       	pop	r29
 7be:	08 95       	ret

000007c0 <main>:

#include "DIO/bitmath.h"
#include "DIO/stdTypes.h"

uint8 main(void)
{
 7c0:	df 93       	push	r29
 7c2:	cf 93       	push	r28
 7c4:	cd b7       	in	r28, 0x3d	; 61
 7c6:	de b7       	in	r29, 0x3e	; 62
	return 0;
 7c8:	80 e0       	ldi	r24, 0x00	; 0
}
 7ca:	cf 91       	pop	r28
 7cc:	df 91       	pop	r29
 7ce:	08 95       	ret

000007d0 <_exit>:
 7d0:	f8 94       	cli

000007d2 <__stop_program>:
 7d2:	ff cf       	rjmp	.-2      	; 0x7d2 <__stop_program>
